(def factorial (fn x
  (if (= x 1)
    1
    (* x (factorial (- x 1))))))

(print (factorial 5)) # 120

(def fib (fn n
  (if (= n 0) 0
    (if (= n 1) 1
      (+ (fib (- n 1)) (fib (- n 2)))))))

(print (fib 5)) # 5

(def ackermann (fn n
  (if (= (fst n) 0)
    (+ (snd n) 1)
    (if (= (snd n) 0)
      (ackermann (- (fst n) 1) 1)
      (ackermann (- (fst n) 1) (ackermann (fst n) (- (snd n) 1)))))))

(print (ackermann 3 3)) # 61

(def map (fn n
  (if (= (snd n) nil)
    nil
    (cons
      ((fst n) (fst (snd n)))
      (map (fst n) (snd (snd n)))))))

(def square (fn x (* x x)))
(print (map square 1 2 3 4 5 nil)) # (1, (4, (9, (16, (25, nil)))))

(def filter (fn n
  (if (= (snd n) nil)
    nil
    (if ((fst n) (fst (snd n)))
      (cons
        (fst (snd n))
        (filter (fst n) (snd (snd n))))
      (filter (fst n) (snd (snd n)))))))

(def istwo (fn x (= x 2)))
(print (filter istwo 1 2 3 4 5 4 3 2 1 2 nil)) # (2, (2, (2, nil)))

(def reduce (fn x
  (let f (fst x)
  (let accum (fst (snd x))
  (let list (snd (snd x))
  (if list
    (f (fst list) (reduce f accum (snd list)))
    accum))))))

(print (reduce + 0 1 2 3 4 5 nil))
       
nil